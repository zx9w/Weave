" if tabular
vnoremap a= :Tabularize /=<CR>
vnoremap a; :Tabularize /::<CR>
vnoremap a- :Tabularize /-><CR>

nnoremap <C-p> :FZF<CR>
let g:fzf_layout = { 'down': '~15%' }

let mapleader = ","
" let maplocalleader

noremap <Leader>h :<C-u>split<CR>
noremap <Leader>v :<C-u>vsplit<CR>
noremap <Leader>gs :Gstatus<CR>
noremap <Leader>gc :Gcommit<CR>
noremap <Leader>sw :SudoWrite<CR>
noremap <Leader>n :bn<CR>
noremap <Leader>p :bp<CR>
noremap <Leader>d :bd<CR>
noremap <Leader>b :buffers<CR>
noremap <Leader>r :Rg<CR>
noremap <Leader>tt :NERDTreeToggle<CR>
noremap <Leader>tg :TagbarToggle<CR>

" reindent whole file
noremap <leader>i mzgg=G`z

nnoremap <Leader>a <Plug>(ale_hover)
nnoremap <Leader>fd <Plug>(ale_go_to_definition_in_tab)
nnoremap <Leader>fr <Plug>(ale_find_references)

" scroll buffer faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

filetype plugin indent on
set notitle
set nocompatible
set smartcase
set shiftwidth=2 tabstop=2 expandtab
set relativenumber
set path+=** " fzf subdirectories in :e
set splitbelow
set splitright
set wildmenu
set shortmess+=aI
set nowritebackup noswapfile
set mouse=a
set mousefocus " window focus follows mouse
set showmatch
set encoding=utf8 ffs=unix,dos,mac
set smartindent
set nowrap
set termguicolors
set nohlsearch
set clipboard=unnamedplus
set nopaste
set list listchars=tab:⇥\ ,extends:❯,precedes:❮,nbsp:␣,trail:· showbreak=↪

if exists("+undofile")
  if isdirectory($HOME . '.vim/undo') == 0
    :silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
  endif
  set undodir=./.vim-undo//
  set undodir+=~/.vim/undo//
  set undofile
endif

" nnoremap <C-j> ddp | vnoremap <C-j> xp`[V`] " what does this do?
" nnoremap <C-k> ddkP | vnoremap <C-k> xkP`[V`] " and this?

" I think this folds the text I select in visual mode
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

if has("autocmd")
  autocmd bufnewfile,bufread *.nix packadd vim-nix | set filetype=nix | set path+=/var/src
  autocmd bufnewfile,bufread *.purs packadd purescript-vim | set filetype=purescript
  autocmd bufnewfile,bufread *.rust packadd rust-vim " | packadd deoplete-rust
  autocmd bufnewfile,bufread *.csv packadd csv-vim | set filetype=csv
  autocmd bufnewfile,bufread *.toml packadd vim-toml | set filetype=toml
  autocmd bufnewfile,bufread *.tex packadd vimtex | set filetype=tex
  autocmd bufnewfile,bufread *.jq packadd jq.vim
  autocmd bufnewfile,bufread *.dhall packadd dhall-vim | set filetype=dhall
  autocmd bufnewfile,bufread *.go packadd vim-go | set filetype=go
  autocmd filetype haskell packadd haskell-vim | set keywordprg=hoogle\ -i
  autocmd bufnewfile,bufread *.ts packadd typescript-vim
  autocmd VimEnter * UpdateRemotePlugins
endif

let g:deoplete#enable_at_startup = 1
set completeopt=noinsert,menuone,noselect
let g:deoplete#sources = {}
let g:deoplete#sources._ = ['ale', 'file', 'omni', 'buffer']

let g:SuperTabDefaultCompletionType = 'context'

let g:haskell_enable_quantification = 1
let g:haskell_enable_recursivedo = 1
let g:haskell_enable_arrowsyntax = 1
let g:haskell_enable_pattern_synonyms = 1

let g:ale_linters = {
      \ 'css': ['csslint'],
      \ 'haskell': ['ghc', 'cabal-ghc', 'hlint'],
      \ 'html': ['tidy', 'proselint'],
      \ 'latex': ['lacheck', 'chktex', 'proselint'],
      \ 'pandoc': ['proselint'],
      \ 'ruby': ['rubocop'],
      \ 'json': ['jsonlint'],
      \ 'rust': ['cargo'],
      \ 'python': ['pyls'],
      \}
let g:ale_fixers = {
      \ '*': ['remove_trailing_lines', 'trim_whitespace'],
      \ 'haskell': ['brittany'],
      \ 'css': ['prettier'],
      \ 'html': ['prettier'],
      \ 'markdown': ['prettier'],
      \ 'json': ['jq'],
      \ 'python': ['black'],
      \ 'rust': ['rustfmt'],
      \ 'go': ['gofmt', 'goimports'],
      \}
let g:ale_set_quickfix = 1
let g:ale_fix_on_save = 1
let g:ale_completion_enabled = 1
